// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Game {
    id             Int              @id @default(autoincrement())
    name           String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    GameMatch      GameMatch[]
    GamePermission GamePermission[]
}

model GameMatch {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    game      Game @relation(references: [id], fields: [gameId])
    patron    User @relation("patron", fields: [patronId], references: [id])
    recipient User @relation("recipient", fields: [recipientId], references: [id])

    gameId      Int
    patronId    String
    recipientId String

    @@unique([gameId, patronId])
    @@unique([gameId, recipientId])
}

enum UserRole {
    ADMIN
    USER
}

enum GameRole {
    ADMIN
    MODERATOR
}

model GamePermission {
    id    Int      @id @default(autoincrement())
    level GameRole @default(MODERATOR)

    game Game @relation(references: [id], fields: [gameId])
    user User @relation(references: [id], fields: [userId])

    gameId Int
    userId String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    role           UserRole         @default(USER)
    accounts       Account[]
    sessions       Session[]
    recipientGames GameMatch[]      @relation("patron")
    patronGames    GameMatch[]      @relation("recipient")
    GamePermission GamePermission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
