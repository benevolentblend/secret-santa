// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum GameStatus {
    Setup
    Sorting
    Active
    Complete
}

model Game {
    id          Int         @id @default(autoincrement())
    name        String
    status      GameStatus  @default(Setup)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    GameMatches GameMatch[]
}

model GameMatch {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    game      Game  @relation(references: [id], fields: [gameId])
    patron    User? @relation("patron", fields: [patronId], references: [id])
    recipient User  @relation("recipient", fields: [recipientId], references: [id])

    gameId      Int
    patronId    String?
    recipientId String

    @@unique([gameId, patronId])
    @@unique([gameId, recipientId])
}

enum UserRole {
    Admin
    User
    Moderator
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String      @id @default(cuid())
    name           String?
    email          String?     @unique
    emailVerified  DateTime?
    image          String?
    role           UserRole    @default(User)
    accounts       Account[]
    sessions       Session[]
    recipientGames GameMatch[] @relation("recipient")
    patronGames    GameMatch[] @relation("patron")
    group          Group?      @relation(fields: [groupId], references: [id])
    groupId        String?
}

model Group {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users User[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
